enrich_results <- enrichr(gene_list, selected_libraries)
# Select databases for enrichment analysis
selected_libraries <- c("Panther_2016")
# Perform the enrichment analysis
enrich_results <- enrichr(gene_list, selected_libraries)
# View and interpret the results
for (library in selected_libraries) {
cat("\nResults for", library, ":\n")
print(enrich_results[[library]])
}
# Visualize the results using ggplot2
# Select the top 10 terms based on adjusted p-value or combined score
top_terms <- panther_results[order(panther_results$Adjusted.P.value),][1:10,]
# View and interpret the results for PANTHER
panther_results <- enrich_results[[selected_libraries]]
print(panther_results)
# Visualize the results using ggplot2
# Select the top 10 terms based on adjusted p-value or combined score
top_terms <- panther_results[order(panther_results$Adjusted.P.value),][1:10,]
# Create a bar plot for the top 10 terms
ggplot(top_terms, aes(x=reorder(Term, -Adjusted.P.value), y=-log10(Adjusted.P.value))) +
geom_bar(stat="identity", fill="skyblue") +
coord_flip() +
labs(title="Top 10 Enriched Terms (PANTHER GO Slim Biological Process)",
x="Biological Process", y="-log10(Adjusted P-value)") +
theme_minimal()
library(ggplot2)
# Select PANTHER database for enrichment analysis
selected_libraries <- c("Panther_2016")
# Perform the enrichment analysis
enrich_results <- enrichr(gene_list, selected_libraries)
# View and interpret the results for PANTHER
panther_results <- enrich_results[[selected_libraries]]
print(panther_results)
# Visualize the results using ggplot2
# Select the top 10 terms based on adjusted p-value or combined score
top_terms <- panther_results[order(panther_results$Adjusted.P.value),][1:10,]
# Create a bar plot for the top 10 terms
ggplot(top_terms, aes(x=reorder(Term, -Adjusted.P.value), y=-log10(Adjusted.P.value))) +
geom_bar(stat="identity", fill="skyblue") +
coord_flip() +
labs(title="Top 10 Enriched Terms (PANTHER GO Slim Biological Process)",
x="Biological Process", y="-log10(Adjusted P-value)") +
theme_minimal()
# Visualize the results using ggplot2
# Select the top 10 terms based on adjusted p-value or combined score
top_terms <- panther_results[order(panther_results$Adjusted.P.value),][1:12,]
View(top_terms)
# Save results to CSV files
for (library in selected_libraries) {
write.csv(enrich_results[[library]], paste0(library, "_results.csv"), row.names = FALSE)
}
#install.packages("pheatmap")
#install.packages("RColorBrewer")
rm(list = ls())
library(pheatmap)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
setwd("/Users/veronikapak/Desktop/cell cell project/validation");
file_path <- "dkt_validation.csv";
X <- read.csv(file_path, header = T);
rownames(X) <- X[,1]
X <- X[,-1]
Y <- read.csv("full dkt.csv", header = T)
rownames(Y) <- rownames(X)
labels <- read.csv('labels.csv', header = T);
# Correlation analysis
corr1 <- cor(X, Y, method = "spearman")
setwd("/Users/veronikapak/Desktop/cell cell project/Validation");
file_path <- "pls_scores.csv";
df <- read.csv(file_path, header = T);
rownames(df) <- df[,1]
df <- df[,-1]
# Define the column names for each group
dopamine_columns <- c("GNAI2_DRD2", "GNAI2_DRD3", "GNAI2_DRD4", "GNAS_DRD1", "GNAS_DRD5",
"RIMS1_SLC18A2", "SYN2_SLC18A2", "SYN3_SLC18A2", "RIMS1_SLC18A3",
"RPS27A_SMAD3", "UBC_SMAD3", "TDGF1_SMAD3", "TGFB1_SMAD3", "INHBA_SMAD3",
"GDF1_SMAD3", "NODAL_SMAD3", "INHBB_SMAD3", "MTMR4_SMAD3", "CFC1_SMAD3")
acetylcholine_columns <- c("SLURP1_CHRNA1", "AGRN_CHRNA1", "LAMA1_CHRNA1", "LAMA2_CHRNA1",
"LAMA3_CHRNA1", "LAMA4_CHRNA1", "LAMA5_CHRNA1", "LAMB1_CHRNA1",
"LAMB2_CHRNA1", "LAMB3_CHRNA1", "LAMC1_CHRNA1", "LAMC2_CHRNA1",
"LAMC3_CHRNA1", "TAC1_DPP4", "TAC1_FAP", "TAC1_TACR1",
"TAC1_TACR2", "TAC1_TACR3")
# Subset the original dataframe to create two new dataframes
dopamine <- df[, colnames(df) %in% dopamine_columns]
acetylcholine <- df[, colnames(df) %in% acetylcholine_columns]
dopamine <- df
# Step 1: Calculate the mean of each row
row_means_dopamine <- rowMeans(dopamine)
ratios_dopamine <- data.frame(Mean = row_means_dopamine)
row_means_acetycholine <- rowMeans(acetylcholine)
ratios_choline <- data.frame(Mean = row_means_acetycholine)
# Step 2: Calculate the adjusted sum for each row
adjusted_sums <- sapply(row_means_dopamine, function(x) sum(row_means_dopamine) - x)
# Step 3: Calculate the final ratio for each row
ratios <- (row_means_dopamine / adjusted_sums)*100
ratios_df <- data.frame(Ratios = ratios)
df <- scale(df)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Apply the normalization function to each column
df_normalized <- as.data.frame(lapply(df, normalize))
pheatmap(t(df), display_numbers = TRUE, angle_col = 0)
#install.packages("pheatmap")
#install.packages("RColorBrewer")
rm(list = ls())
setwd("/Users/veronikapak/Desktop/cell cell project/validation");
file_path <- "dkt_validation.csv";
X <- read.csv(file_path, header = T);
rownames(X) <- X[,1]
X <- X[,-1]
Y <- read.csv("full dkt.csv", header = T)
rownames(Y) <- rownames(X)
labels <- read.csv('labels.csv', header = T);
# Correlation analysis
corr1 <- cor(X, Y, method = "spearman")
# First table
file_path <- "atrophy_corr.csv";
df <- read.csv(file_path, header = T, row.names = NULL);
rownames(df) <- df[,1]
df <- df[,-1]
colnames(df) <- gsub("^X\\.", "", colnames(df))
colnames(df) <- gsub("\\.$", "", colnames(df))
rownames(df) <- gsub("^X\\.", "", rownames(df))
X <- df[, 1:37]  # Select columns 1 to 268 for X
Y <- df[, 38:45] #DKT
corr2 <- cor(X, Y, method = "spearman")
corr <- cbind(corr2, corr1)
annotation_df <- data.frame(
Type = labels$Type
)
# Factor the 'Group' to control colors and labels
annotation_df$Type <- factor(labels$Type, levels = c("Dopamine", "Acetycholine"))
# Optional: Add colors for groups
group_colors <- setNames(c("gold1", "maroon"), c("Dopamine", "Acetycholine"))
rownames(annotation_df) <- labels$Pair
# Vizualize significant features with heatmap
pheatmap(corr, display_numbers = TRUE,
annotation_row = annotation_df, annotation_colors = list(Type = group_colors))
rm(list = ls())
library(pheatmap)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
setwd("/Users/veronikapak/Desktop/cell cell project/Validation");
file_path <- "dopamine_validation_dkt.csv";
df <- read.csv(file_path, header = T);
View(df)
rownames(df) <- df[,1]
df <- df[,-1]
pheatmap(df, display_numbers = TRUE, angle_col = 0)
row_means_dopamine <- rowMeans(df)
ratios_dopamine <- data.frame(Mean = row_means_dopamine)
View(ratios_dopamine)
# Step 2: Calculate the adjusted sum for each row
adjusted_sums <- sapply(row_means_dopamine, function(x) sum(row_means_dopamine) - x)
# Step 3: Calculate the final ratio for each row
ratios <- (row_means_dopamine / adjusted_sums)*100
ratios_df <- data.frame(Ratios = ratios)
View(ratios_df)
df <- scale(df)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Apply the normalization function to each column
df_normalized <- as.data.frame(lapply(df, normalize))
pheatmap(t(df), display_numbers = TRUE, angle_col = 0)
pheatmap(df, display_numbers = TRUE, angle_col = 0)
pheatmap(df_normalized, display_numbers = TRUE, angle_col = 0)
pheatmap(df, display_numbers = TRUE, angle_col = 0)
df <- read.csv(file_path, header = T);
rownames(df) <- df[,1]
df <- df[,-1]
df <- scale(df)
pheatmap(df, display_numbers = TRUE, angle_col = 0)
file_path <- "dopamine_validation_dkt.csv";
df <- read.csv(file_path, header = T);
rownames(df) <- df[,1]
df <- df[,-1]
df <- scale(df)
pheatmap(df, display_numbers = TRUE, angle_col = 0)
View(df)
df <- read.csv(file_path, header = T, check.names = FALSE);
View(df)
rownames(df) <- df[,1]
df <- df[,-1]
df <- scale(df)
pheatmap(df, display_numbers = TRUE, angle_col = 0)
pheatmap(df, display_numbers = TRUE, angle_col = 45)
pheatmap(df, display_numbers = TRUE, angle_col = 0)
?pheatmap
df <- read.csv("LV2.csv", header = T,
stringsAsFactors = FALSE);
setwd("/Users/veronikapak/Desktop/cell cell project/");
df <- read.csv("LV2.csv", header = T,
stringsAsFactors = FALSE);
df$Pair <- gsub("[^[:alnum:]]+$", "", df$Pair)
pattern <- paste(df$Pair, collapse = "|")
result <- labels %>%
filter(str_detect(Pair, pattern))
library(dplyr)
library(stringr)
df$Pair <- gsub("[^[:alnum:]]+$", "", df$Pair)
labels <- read.csv("pls_labels_final2.csv", header = T);
pattern <- paste(df$Pair, collapse = "|")
result <- labels %>%
filter(str_detect(Pair, pattern))
result <- result[order(match(result$Pair, df$Pair)), ]
View(result)
label_counts <- table(result$Interaction)
label_counts_df <- as.data.frame(label_counts)
View(label_counts_df)
# Load necessary libraries
library(igraph)
# Define the edges and weights based on the provided relationships and counts
edges <- c("Astrocyte", "Neuron",
"Neuron", "Microglia",
"Endothelial", "Microglia",
#"Endothelial", "Astrocyte",
"Neuron", "Endothelial",
"Astrocyte", "OPC",
"OPC", "Microglia",
"OPC", "Neuron",
"Oligodendrocyte", "Neuron",
#"Oligodendrocyte", "Astrocyte",
"Astrocyte", "Astrocyte",
"Microglia", "Microglia",
"Astrocyte", "Microglia",
"Oligodendrocyte", "Endothelial",
"Endothelial", "OPC")
weights <- c(
10 + 5,  # Astrocyte-Neuron and Neuron-Astrocyte
6 + 3,   # Neuron-Microglia and Microglia-Neuron
2 + 1,    # Endothelial-Microglia and Microglia-Endothelial
#0,    # Endothelial-Astrocyte and Astrocyte-Endothelial
8 + 14,        # Endothelial-Neuron
2,        # Astrocyte-OPC
1,        # OPC-Microglia
1+2, #OPC-Neuron
6 + 5,        # Oligodendrocyte-Neuron
#1,         # Oligodendrocyte-Astrocyte
1, #Astrocyte-Astrocyte
6, #Microglia-Microglia
2 + 1, #Astrocyte and Microglia,
1, #Oligodendrocyte and Endothelial
1 #Endothelial - OPC
)
# Create a directed graph
g <- graph(edges, directed=FALSE)  # Set directed to FALSE for undirected edges
# Add weights to the edges
E(g)$weight <- weights
# Define edge colors based on the weights (optional)
E(g)$color <- ifelse(E(g)$weight > 7, "brown1", "lightskyblue1")
layout <- layout_in_circle(g)
# Plot the graph
plot(g, edge.arrow.size=0, edge.width=E(g)$weight,
vertex.color="lightblue2", vertex.size=30, vertex.label.cex=1.5,
edge.curved=0.2, layout=layout,
edge.label=E(g)$weight, edge.label.cex=1.2, edge.label.color="black",
vertex.frame.color=NA,  # Remove node contours
main="Cell Interactions")
label_counts <- table(labels$Interaction)
label_counts_labels <- as.data.frame(label_counts)
View(label_counts_labels)
df <- read.csv("LV3.csv", header = T,
stringsAsFactors = FALSE);
pattern <- paste(df$Pair, collapse = "|")
result <- labels %>%
filter(str_detect(Pair, pattern))
result <- result[order(match(result$Pair, df$Pair)), ]
label_counts <- table(result$Interaction)
label_counts_df <- as.data.frame(label_counts)
View(df)
pattern <- paste(df$Pair, collapse = "|")
result <- labels %>%
filter(str_detect(Pair, pattern))
df <- read.csv("LV2.csv", header = T,
stringsAsFactors = FALSE);
df$Pair <- gsub("[^[:alnum:]]+$", "", df$Pair)
pattern <- paste(df$Pair, collapse = "|")
result <- labels %>%
filter(str_detect(Pair, pattern))
df <- read.csv("LV3.csv", header = T,
stringsAsFactors = FALSE);
df$Pair <- gsub("[^[:alnum:]]+$", "", df$Pair)
pattern <- paste(df$Pair, collapse = "|")
result <- labels %>%
filter(str_detect(Pair, pattern))
result <- result[order(match(result$Pair, df$Pair)), ]
View(result)
label_counts <- table(result$Interaction)
label_counts_df <- as.data.frame(label_counts)
View(label_counts_df)
View(result)
View(label_counts_df)
# Define the edges and weights based on the provided relationships and counts
edges <- c("Astrocyte", "Neuron",
"Neuron", "Microglia",
"Endothelial", "Microglia",
"Endothelial", "Astrocyte",
"Neuron", "Endothelial",
"Astrocyte", "OPC",
"OPC", "Microglia",
"OPC", "Neuron",
"Oligodendrocyte", "Neuron",
"Oligodendrocyte", "Astrocyte",
"Astrocyte", "Astrocyte",
"Microglia", "Microglia",
"Astrocyte", "Microglia",
#"Oligodendrocyte", "Endothelial",
"Endothelial", "OPC",
"Endothelial", "Endothelial")
weights <- c(
11 + 10,  # Astrocyte-Neuron and Neuron-Astrocyte
4 + 2,   # Neuron-Microglia and Microglia-Neuron
2 + 3,    # Endothelial-Microglia and Microglia-Endothelial
10,    # Endothelial-Astrocyte and Astrocyte-Endothelial
8 + 6,        # Endothelial-Neuron
1,        # Astrocyte-OPC
1,        # OPC-Microglia
2, #OPC-Neuron
3 + 1,        # Oligodendrocyte-Neuron
3,         # Oligodendrocyte-Astrocyte
4, #Astrocyte-Astrocyte
3, #Microglia-Microglia
3, #Astrocyte and Microglia,
#1, #Oligodendrocyte and Endothelial
#1 #Endothelial - OPC
1 #Endothelial-Endothelial
)
# Create a directed graph
g <- graph(edges, directed=FALSE)  # Set directed to FALSE for undirected edges
# Add weights to the edges
E(g)$weight <- weights
# Define edge colors based on the weights (optional)
E(g)$color <- ifelse(E(g)$weight > 7, "brown1", "lightskyblue1")
layout <- layout_in_circle(g)
# Plot the graph
plot(g, edge.arrow.size=0, edge.width=E(g)$weight,
vertex.color="lightblue2", vertex.size=30, vertex.label.cex=1.5,
edge.curved=0.2, layout=layout,
edge.label=E(g)$weight, edge.label.cex=1.2, edge.label.color="black",
vertex.frame.color=NA,  # Remove node contours
main="Cell Interactions")
# Define the edges and weights based on the provided relationships and counts
edges <- c("Astrocyte", "Neuron",
"Neuron", "Microglia",
"Endothelial", "Microglia",
"Endothelial", "Astrocyte",
"Neuron", "Endothelial",
"Astrocyte", "OPC",
"OPC", "Microglia",
"OPC", "Neuron",
"Oligodendrocyte", "Neuron",
"Oligodendrocyte", "Astrocyte",
"Astrocyte", "Astrocyte",
"Microglia", "Microglia",
"Astrocyte", "Microglia",
#"Oligodendrocyte", "Endothelial",
#"Endothelial", "OPC",
"Endothelial", "Endothelial")
weights <- c(
11 + 10,  # Astrocyte-Neuron and Neuron-Astrocyte
4 + 2,   # Neuron-Microglia and Microglia-Neuron
2 + 3,    # Endothelial-Microglia and Microglia-Endothelial
10,    # Endothelial-Astrocyte and Astrocyte-Endothelial
8 + 6,        # Endothelial-Neuron
1,        # Astrocyte-OPC
1,        # OPC-Microglia
2, #OPC-Neuron
3 + 1,        # Oligodendrocyte-Neuron
3,         # Oligodendrocyte-Astrocyte
4, #Astrocyte-Astrocyte
3, #Microglia-Microglia
3, #Astrocyte and Microglia,
#1, #Oligodendrocyte and Endothelial
#1 #Endothelial - OPC
1 #Endothelial-Endothelial
)
# Create a directed graph
g <- graph(edges, directed=FALSE)  # Set directed to FALSE for undirected edges
# Add weights to the edges
E(g)$weight <- weights
# Define edge colors based on the weights (optional)
E(g)$color <- ifelse(E(g)$weight > 7, "brown1", "lightskyblue1")
layout <- layout_in_circle(g)
# Plot the graph
plot(g, edge.arrow.size=0, edge.width=E(g)$weight,
vertex.color="lightblue2", vertex.size=30, vertex.label.cex=1.5,
edge.curved=0.2, layout=layout,
edge.label=E(g)$weight, edge.label.cex=1.2, edge.label.color="black",
vertex.frame.color=NA,  # Remove node contours
main="Cell Interactions")
View(label_counts_labels)
df2 <- read.csv("new_labels.csv", header = T,
stringsAsFactors = FALSE);
View(df2)
View(labels)
View(df2)
label_counts <- table(df2$Interaction)
label_counts_labels <- as.data.frame(label_counts)
View(label_counts_labels)
View(df2)
df1 <- read.csv("new_merged_data_4.csv", header = T,
stringsAsFactors = FALSE);
label_counts <- table(df1$Interaction)
label_counts_labels <- as.data.frame(label_counts)
View(label_counts_labels)
View(df1)
label_counts <- table(df1$Combined)
label_counts_labels <- as.data.frame(label_counts)
View(label_counts_labels)
library(braincellann)
gene_list <- c("VIP", "PVALB", "APOE", "CSF1", "IL34")
# Convert the list of genes into a data frame with an index column (if needed)
# This mimics how the package expects input for annotation functions
df_genes <- data.frame(
index = seq_along(gene_list),
gene_marker = gene_list
)
# Annotate gene markers
annotated_data <- annotateList(df_genes)
#' Annotate Gene Markers with Human Protein Atlas Database
#'
#' This function annotates a list of gene markers using the Human Protein Atlas (HPA) database.
#'
#' @param df A data frame containing gene markers and an index column.
#' @return A list
#'
#' @noRd
#' @keywords internal
annotate_hpa <- function(df) {
# First HPA Annotation
hpa.df <- hpaDownload(downloadList = 'Normal tissue')
tissueList <- c('cerebral cortex', 'cerebellum', 'hypothalamus', 'substantia nigra')
levelList <- c('Medium', 'High', 'Ascending')
reliability <- c('Approved', 'Enhanced', 'Supported')
subset <- hpaSubset(data=hpa.df,
targetGene=df[,1],
targetTissue=tissueList)
hpa <- data.frame(
markers = subset[["normal_tissue"]][["gene"]],
tissue = subset[["normal_tissue"]][["tissue"]],
cell_type = subset[["normal_tissue"]][["cell_type"]],
level = subset[["normal_tissue"]][["level"]],
reliability = subset[["normal_tissue"]][["reliability"]]
)
hpa <- hpa %>%
filter(level %in% c('Medium', 'High', 'Ascending', 'Low'),
reliability %in% c('Approved', 'Enhanced', 'Supported'))
merged_df <- merge(df, hpa, by = "markers", all.x = TRUE)
merged_df <- merged_df[order(merged_df$index), ]
subset <- merged_df %>%
select(markers, index, cell_type)
combined_df <- subset %>%
group_by(index) %>%
summarise(markers = paste(unique(markers), collapse = ", "),
cell_type = paste(unique(cell_type), collapse = ", ")) %>%
separate(cell_type, into = paste0("HumanProteinAtlas_", 1:2), sep = ",")
annotated_hpa <- combined_df[, -which(names(combined_df) == "index")]
# Annotate with Human Protein Atlas 2
# Change the timeout to 120 seconds
original_timeout <- getOption("timeout")
options(timeout = 300)
hpa.df2 <- hpaDownload(downloadList = "RNA single cell type tissue cluster")
subset <- hpaSubset(data=hpa.df2,
targetGene=df[,1],
targetTissue="brain")
hpa <- data.frame(
markers = subset[["rna_single_cell_type_tissue"]][["gene"]],
cell_type = subset[["rna_single_cell_type_tissue"]][["cell_type"]],
ntpm = subset[["rna_single_cell_type_tissue"]][["ptpm"]]
)
# Restore original timeout
options(timeout = original_timeout)
merged_df <- merge(df, hpa, by = "markers", all.x = TRUE)
merged_df <- merged_df[order(merged_df$index), ]
# Step 1: Arrange and then deduplicate by keeping the highest-ranked occurrence of each cell_type within each index
prepared_df <- merged_df %>%
arrange(index, desc(ntpm)) %>%
group_by(index, cell_type) %>%
filter(row_number() == 1) %>%
ungroup()
# Step 2: Now, rank within each 'index' without worrying about duplicates
prepared_df <- prepared_df %>%
group_by(index) %>%
mutate(rank = row_number()) %>%
filter(rank <= 2) %>%
ungroup()
# Step 3: Create a unique identifier for pivoting, as before
prepared_df <- prepared_df %>%
mutate(cell_type_id = paste0("HumanProteinAtlas.Sc_", rank)) %>%
select(-rank, -ntpm) # Proceeding without 'ntpm'
# Step 4: Pivot wider to format the dataframe
annotated_hpa2 <- prepared_df %>%
pivot_wider(id_cols = c(index, markers),
names_from = cell_type_id,
values_from = cell_type,
values_fill = list(cell_type = NA))
return(list(annotated_hpa = annotated_hpa, annotated_hpa2 = annotated_hpa2))
}
gene_list <- c("VIP", "PVALB", "APOE", "CSF1", "IL34")
# Convert the list of genes into a data frame with an index column (if needed)
# This mimics how the package expects input for annotation functions
df_genes <- data.frame(
index = seq_along(gene_list),
gene_marker = gene_list
)
# Annotate gene markers
annotated_data <- annotateList(df_genes)
