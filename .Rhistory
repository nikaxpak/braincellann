"darkslategray3"  # Color other edges light sky blue
)
)
E(g1)$color <- edge_colors
# Adjust loop angles to orient specific self-loops
loop_angles <- ifelse(
V(g1)$name == "Microglia", -(pi / 1.08),  # Make Microglia's loop face up (90 degrees)
pi / 4  # Default angle for other self-loops
)
E(g1)$loop.angle <- loop_angles[match(ends(g1, E(g1))[, 1], V(g1)$name)]
# Increase curvature for specific edges if needed
E(g1)$curved <- ifelse(
(ends(g1, E(g1))[, 1] == "Endothelial" & ends(g1, E(g1))[, 2] == "Microglia") |
(ends(g1, E(g1))[, 1] == "Microglia" & ends(g1, E(g1))[, 2] == "Endothelial"),
0.5,  # More curvature for this edge
0.2  # Default curvature
)
# Use a circular layout
layout1 <- layout_in_circle(g1)
# Plot the graph with customized self-loops and edge curvatures
plot(
g1, edge.arrow.size = 0, edge.width = E(g1)$weight,
vertex.color = "lightblue2", vertex.size = 30, vertex.label.cex = 1.5,
edge.curved = E(g1)$curved, layout = layout1,
edge.label = E(g1)$weight, edge.label.cex = 1.2, edge.label.color = "black",
vertex.frame.color = NA, main = "Cell Interactions",
edge.loop.size = 0.15  # Adjust size of self-loops
)
# Identify self-loops and main edges, assigning colors using ifelse()
edge_colors <- ifelse(
apply(ends(g1, E(g1)), 1, function(x) x[1] == x[2]),  # Self-loop check
"coral1",  # Color self-loops red
ifelse(
E(g1)$weight >= 10,  # Main edges with weight >= 10
"coral1",  # Color edges with weight >= 10 brown
"deepskyblue2"  # Color other edges light sky blue
)
)
# Use a circular layout
layout1 <- layout_in_circle(g1)
# Plot the graph with customized self-loops and edge curvatures
plot(
g1, edge.arrow.size = 0, edge.width = E(g1)$weight,
vertex.color = "lightblue2", vertex.size = 30, vertex.label.cex = 1.5,
edge.curved = E(g1)$curved, layout = layout1,
edge.label = E(g1)$weight, edge.label.cex = 1.2, edge.label.color = "black",
vertex.frame.color = NA, main = "Cell Interactions",
edge.loop.size = 0.15  # Adjust size of self-loops
)
# Identify self-loops and main edges, assigning colors using ifelse()
edge_colors <- ifelse(
apply(ends(g1, E(g1)), 1, function(x) x[1] == x[2]),  # Self-loop check
"coral1",  # Color self-loops red
ifelse(
E(g1)$weight >= 10,  # Main edges with weight >= 10
"coral1",  # Color edges with weight >= 10 brown
"deepskyblue2"  # Color other edges light sky blue
)
)
E(g1)$color <- edge_colors
# Adjust loop angles to orient specific self-loops
loop_angles <- ifelse(
V(g1)$name == "Microglia", -(pi / 1.08),  # Make Microglia's loop face up (90 degrees)
pi / 4  # Default angle for other self-loops
)
E(g1)$loop.angle <- loop_angles[match(ends(g1, E(g1))[, 1], V(g1)$name)]
# Increase curvature for specific edges if needed
E(g1)$curved <- ifelse(
(ends(g1, E(g1))[, 1] == "Endothelial" & ends(g1, E(g1))[, 2] == "Microglia") |
(ends(g1, E(g1))[, 1] == "Microglia" & ends(g1, E(g1))[, 2] == "Endothelial"),
0.5,  # More curvature for this edge
0.2  # Default curvature
)
# Use a circular layout
layout1 <- layout_in_circle(g1)
# Plot the graph with customized self-loops and edge curvatures
plot(
g1, edge.arrow.size = 0, edge.width = E(g1)$weight,
vertex.color = "lightblue2", vertex.size = 30, vertex.label.cex = 1.5,
edge.curved = E(g1)$curved, layout = layout1,
edge.label = E(g1)$weight, edge.label.cex = 1.2, edge.label.color = "black",
vertex.frame.color = NA, main = "Cell Interactions",
edge.loop.size = 0.15  # Adjust size of self-loops
)
# Identify self-loops and main edges, assigning colors using ifelse()
edge_colors <- ifelse(
apply(ends(g1, E(g1)), 1, function(x) x[1] == x[2]),  # Self-loop check
"coral1",  # Color self-loops red
ifelse(
E(g1)$weight >= 10,  # Main edges with weight >= 10
"coral1",  # Color edges with weight >= 10 brown
"deepskyblue3"  # Color other edges light sky blue
)
)
E(g1)$color <- edge_colors
# Adjust loop angles to orient specific self-loops
loop_angles <- ifelse(
V(g1)$name == "Microglia", -(pi / 1.08),  # Make Microglia's loop face up (90 degrees)
pi / 4  # Default angle for other self-loops
)
E(g1)$loop.angle <- loop_angles[match(ends(g1, E(g1))[, 1], V(g1)$name)]
# Increase curvature for specific edges if needed
E(g1)$curved <- ifelse(
(ends(g1, E(g1))[, 1] == "Endothelial" & ends(g1, E(g1))[, 2] == "Microglia") |
(ends(g1, E(g1))[, 1] == "Microglia" & ends(g1, E(g1))[, 2] == "Endothelial"),
0.5,  # More curvature for this edge
0.2  # Default curvature
)
# Use a circular layout
layout1 <- layout_in_circle(g1)
# Plot the graph with customized self-loops and edge curvatures
plot(
g1, edge.arrow.size = 0, edge.width = E(g1)$weight,
vertex.color = "lightblue2", vertex.size = 30, vertex.label.cex = 1.5,
edge.curved = E(g1)$curved, layout = layout1,
edge.label = E(g1)$weight, edge.label.cex = 1.2, edge.label.color = "black",
vertex.frame.color = NA, main = "Cell Interactions",
edge.loop.size = 0.15  # Adjust size of self-loops
)
# Identify self-loops and main edges, assigning colors using ifelse()
edge_colors <- ifelse(
apply(ends(g1, E(g1)), 1, function(x) x[1] == x[2]),  # Self-loop check
"coral1",  # Color self-loops red
ifelse(
E(g1)$weight >= 10,  # Main edges with weight >= 10
"coral1",  # Color edges with weight >= 10 brown
"lightskyblue1"  # Color other edges light sky blue
)
)
E(g1)$color <- edge_colors
# Adjust loop angles to orient specific self-loops
loop_angles <- ifelse(
V(g1)$name == "Microglia", -(pi / 1.08),  # Make Microglia's loop face up (90 degrees)
pi / 4  # Default angle for other self-loops
)
E(g1)$loop.angle <- loop_angles[match(ends(g1, E(g1))[, 1], V(g1)$name)]
# Increase curvature for specific edges if needed
E(g1)$curved <- ifelse(
(ends(g1, E(g1))[, 1] == "Endothelial" & ends(g1, E(g1))[, 2] == "Microglia") |
(ends(g1, E(g1))[, 1] == "Microglia" & ends(g1, E(g1))[, 2] == "Endothelial"),
0.5,  # More curvature for this edge
0.2  # Default curvature
)
# Use a circular layout
layout1 <- layout_in_circle(g1)
# Plot the graph with customized self-loops and edge curvatures
plot(
g1, edge.arrow.size = 0, edge.width = E(g1)$weight,
vertex.color = "lightblue2", vertex.size = 30, vertex.label.cex = 1.5,
edge.curved = E(g1)$curved, layout = layout1,
edge.label = E(g1)$weight, edge.label.cex = 1.2, edge.label.color = "black",
vertex.frame.color = NA, main = "Cell Interactions",
edge.loop.size = 0.15  # Adjust size of self-loops
)
# Identify self-loops and main edges, assigning colors using ifelse()
edge_colors <- ifelse(
apply(ends(g1, E(g1)), 1, function(x) x[1] == x[2]),  # Self-loop check
"coral1",  # Color self-loops red
ifelse(
E(g1)$weight >= 10,  # Main edges with weight >= 10
"coral1",  # Color edges with weight >= 10 brown
"lightskyblue2"  # Color other edges light sky blue
)
)
E(g1)$color <- edge_colors
# Adjust loop angles to orient specific self-loops
loop_angles <- ifelse(
V(g1)$name == "Microglia", -(pi / 1.08),  # Make Microglia's loop face up (90 degrees)
pi / 4  # Default angle for other self-loops
)
E(g1)$loop.angle <- loop_angles[match(ends(g1, E(g1))[, 1], V(g1)$name)]
# Increase curvature for specific edges if needed
E(g1)$curved <- ifelse(
(ends(g1, E(g1))[, 1] == "Endothelial" & ends(g1, E(g1))[, 2] == "Microglia") |
(ends(g1, E(g1))[, 1] == "Microglia" & ends(g1, E(g1))[, 2] == "Endothelial"),
0.5,  # More curvature for this edge
0.2  # Default curvature
)
# Use a circular layout
layout1 <- layout_in_circle(g1)
# Plot the graph with customized self-loops and edge curvatures
plot(
g1, edge.arrow.size = 0, edge.width = E(g1)$weight,
vertex.color = "lightblue2", vertex.size = 30, vertex.label.cex = 1.5,
edge.curved = E(g1)$curved, layout = layout1,
edge.label = E(g1)$weight, edge.label.cex = 1.2, edge.label.color = "black",
vertex.frame.color = NA, main = "Cell Interactions",
edge.loop.size = 0.15  # Adjust size of self-loops
)
# Identify self-loops and main edges, assigning colors using ifelse()
edge_colors <- ifelse(
apply(ends(g1, E(g1)), 1, function(x) x[1] == x[2]),  # Self-loop check
"coral1",  # Color self-loops red
ifelse(
E(g1)$weight >= 10,  # Main edges with weight >= 10
"coral1",  # Color edges with weight >= 10 brown
"lightskyblue3"  # Color other edges light sky blue
)
)
E(g1)$color <- edge_colors
# Adjust loop angles to orient specific self-loops
loop_angles <- ifelse(
V(g1)$name == "Microglia", -(pi / 1.08),  # Make Microglia's loop face up (90 degrees)
pi / 4  # Default angle for other self-loops
)
E(g1)$loop.angle <- loop_angles[match(ends(g1, E(g1))[, 1], V(g1)$name)]
# Increase curvature for specific edges if needed
E(g1)$curved <- ifelse(
(ends(g1, E(g1))[, 1] == "Endothelial" & ends(g1, E(g1))[, 2] == "Microglia") |
(ends(g1, E(g1))[, 1] == "Microglia" & ends(g1, E(g1))[, 2] == "Endothelial"),
0.5,  # More curvature for this edge
0.2  # Default curvature
)
# Use a circular layout
layout1 <- layout_in_circle(g1)
# Plot the graph with customized self-loops and edge curvatures
plot(
g1, edge.arrow.size = 0, edge.width = E(g1)$weight,
vertex.color = "lightblue2", vertex.size = 30, vertex.label.cex = 1.5,
edge.curved = E(g1)$curved, layout = layout1,
edge.label = E(g1)$weight, edge.label.cex = 1.2, edge.label.color = "black",
vertex.frame.color = NA, main = "Cell Interactions",
edge.loop.size = 0.15  # Adjust size of self-loops
)
# Identify self-loops and main edges, assigning colors using ifelse()
edge_colors <- ifelse(
apply(ends(g1, E(g1)), 1, function(x) x[1] == x[2]),  # Self-loop check
"coral1",  # Color self-loops red
ifelse(
E(g1)$weight >= 10,  # Main edges with weight >= 10
"coral1",  # Color edges with weight >= 10 brown
"lightskyblue"  # Color other edges light sky blue
)
)
E(g1)$color <- edge_colors
# Adjust loop angles to orient specific self-loops
loop_angles <- ifelse(
V(g1)$name == "Microglia", -(pi / 1.08),  # Make Microglia's loop face up (90 degrees)
pi / 4  # Default angle for other self-loops
)
E(g1)$loop.angle <- loop_angles[match(ends(g1, E(g1))[, 1], V(g1)$name)]
# Increase curvature for specific edges if needed
E(g1)$curved <- ifelse(
(ends(g1, E(g1))[, 1] == "Endothelial" & ends(g1, E(g1))[, 2] == "Microglia") |
(ends(g1, E(g1))[, 1] == "Microglia" & ends(g1, E(g1))[, 2] == "Endothelial"),
0.5,  # More curvature for this edge
0.2  # Default curvature
)
# Use a circular layout
layout1 <- layout_in_circle(g1)
# Plot the graph with customized self-loops and edge curvatures
plot(
g1, edge.arrow.size = 0, edge.width = E(g1)$weight,
vertex.color = "lightblue2", vertex.size = 30, vertex.label.cex = 1.5,
edge.curved = E(g1)$curved, layout = layout1,
edge.label = E(g1)$weight, edge.label.cex = 1.2, edge.label.color = "black",
vertex.frame.color = NA, main = "Cell Interactions",
edge.loop.size = 0.15  # Adjust size of self-loops
)
# Identify self-loops and main edges, assigning colors using ifelse()
edge_colors <- ifelse(
apply(ends(g1, E(g1)), 1, function(x) x[1] == x[2]),  # Self-loop check
"coral1",  # Color self-loops red
ifelse(
E(g1)$weight >= 10,  # Main edges with weight >= 10
"coral1",  # Color edges with weight >= 10 brown
"lightskyblue2"  # Color other edges light sky blue
)
)
E(g1)$color <- edge_colors
# Adjust loop angles to orient specific self-loops
loop_angles <- ifelse(
V(g1)$name == "Microglia", -(pi / 1.08),  # Make Microglia's loop face up (90 degrees)
pi / 4  # Default angle for other self-loops
)
E(g1)$loop.angle <- loop_angles[match(ends(g1, E(g1))[, 1], V(g1)$name)]
# Increase curvature for specific edges if needed
E(g1)$curved <- ifelse(
(ends(g1, E(g1))[, 1] == "Endothelial" & ends(g1, E(g1))[, 2] == "Microglia") |
(ends(g1, E(g1))[, 1] == "Microglia" & ends(g1, E(g1))[, 2] == "Endothelial"),
0.5,  # More curvature for this edge
0.2  # Default curvature
)
# Use a circular layout
layout1 <- layout_in_circle(g1)
# Plot the graph with customized self-loops and edge curvatures
plot(
g1, edge.arrow.size = 0, edge.width = E(g1)$weight,
vertex.color = "lightblue2", vertex.size = 30, vertex.label.cex = 1.5,
edge.curved = E(g1)$curved, layout = layout1,
edge.label = E(g1)$weight, edge.label.cex = 1.2, edge.label.color = "black",
vertex.frame.color = NA, main = "Cell Interactions",
edge.loop.size = 0.15  # Adjust size of self-loops
)
# Install and load the package
install.packages("enrichR")
library(enrichR)
# Sample data frame (replace this with your actual data frame)
# Ensure that your data frame has a column named 'gene_symbols' containing your gene list
setwd("/Users/veronikapak/Desktop/cell cell project/");
gene_data <- read.csv("weights_genes.csv", header = FALSE,
stringsAsFactors = FALSE);
# Extract the gene list from the data frame
gene_list <- gene_data$V1
# List available databases
databases <- listEnrichrDbs()
print(databases)
# Select databases for enrichment analysis
selected_libraries <- c("OMIM_Disease")
# Perform the enrichment analysis
enrich_results <- enrichr(gene_list, selected_libraries)
# View and interpret the results
for (library in selected_libraries) {
cat("\nResults for", library, ":\n")
print(enrich_results[[library]])
}
# Select databases for enrichment analysis
selected_libraries <- c("Panther_2015")
# Perform the enrichment analysis
enrich_results <- enrichr(gene_list, selected_libraries)
# Select databases for enrichment analysis
selected_libraries <- c("Panther_2016")
# Perform the enrichment analysis
enrich_results <- enrichr(gene_list, selected_libraries)
# View and interpret the results
for (library in selected_libraries) {
cat("\nResults for", library, ":\n")
print(enrich_results[[library]])
}
# Visualize the results using ggplot2
# Select the top 10 terms based on adjusted p-value or combined score
top_terms <- panther_results[order(panther_results$Adjusted.P.value),][1:10,]
# View and interpret the results for PANTHER
panther_results <- enrich_results[[selected_libraries]]
print(panther_results)
# Visualize the results using ggplot2
# Select the top 10 terms based on adjusted p-value or combined score
top_terms <- panther_results[order(panther_results$Adjusted.P.value),][1:10,]
# Create a bar plot for the top 10 terms
ggplot(top_terms, aes(x=reorder(Term, -Adjusted.P.value), y=-log10(Adjusted.P.value))) +
geom_bar(stat="identity", fill="skyblue") +
coord_flip() +
labs(title="Top 10 Enriched Terms (PANTHER GO Slim Biological Process)",
x="Biological Process", y="-log10(Adjusted P-value)") +
theme_minimal()
library(ggplot2)
# Select PANTHER database for enrichment analysis
selected_libraries <- c("Panther_2016")
# Perform the enrichment analysis
enrich_results <- enrichr(gene_list, selected_libraries)
# View and interpret the results for PANTHER
panther_results <- enrich_results[[selected_libraries]]
print(panther_results)
# Visualize the results using ggplot2
# Select the top 10 terms based on adjusted p-value or combined score
top_terms <- panther_results[order(panther_results$Adjusted.P.value),][1:10,]
# Create a bar plot for the top 10 terms
ggplot(top_terms, aes(x=reorder(Term, -Adjusted.P.value), y=-log10(Adjusted.P.value))) +
geom_bar(stat="identity", fill="skyblue") +
coord_flip() +
labs(title="Top 10 Enriched Terms (PANTHER GO Slim Biological Process)",
x="Biological Process", y="-log10(Adjusted P-value)") +
theme_minimal()
# Visualize the results using ggplot2
# Select the top 10 terms based on adjusted p-value or combined score
top_terms <- panther_results[order(panther_results$Adjusted.P.value),][1:12,]
View(top_terms)
# Save results to CSV files
for (library in selected_libraries) {
write.csv(enrich_results[[library]], paste0(library, "_results.csv"), row.names = FALSE)
}
#install.packages("pheatmap")
#install.packages("RColorBrewer")
rm(list = ls())
library(pheatmap)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
setwd("/Users/veronikapak/Desktop/cell cell project/validation");
file_path <- "dkt_validation.csv";
X <- read.csv(file_path, header = T);
rownames(X) <- X[,1]
X <- X[,-1]
Y <- read.csv("full dkt.csv", header = T)
rownames(Y) <- rownames(X)
labels <- read.csv('labels.csv', header = T);
# Correlation analysis
corr1 <- cor(X, Y, method = "spearman")
setwd("/Users/veronikapak/Desktop/cell cell project/Validation");
file_path <- "pls_scores.csv";
df <- read.csv(file_path, header = T);
rownames(df) <- df[,1]
df <- df[,-1]
# Define the column names for each group
dopamine_columns <- c("GNAI2_DRD2", "GNAI2_DRD3", "GNAI2_DRD4", "GNAS_DRD1", "GNAS_DRD5",
"RIMS1_SLC18A2", "SYN2_SLC18A2", "SYN3_SLC18A2", "RIMS1_SLC18A3",
"RPS27A_SMAD3", "UBC_SMAD3", "TDGF1_SMAD3", "TGFB1_SMAD3", "INHBA_SMAD3",
"GDF1_SMAD3", "NODAL_SMAD3", "INHBB_SMAD3", "MTMR4_SMAD3", "CFC1_SMAD3")
acetylcholine_columns <- c("SLURP1_CHRNA1", "AGRN_CHRNA1", "LAMA1_CHRNA1", "LAMA2_CHRNA1",
"LAMA3_CHRNA1", "LAMA4_CHRNA1", "LAMA5_CHRNA1", "LAMB1_CHRNA1",
"LAMB2_CHRNA1", "LAMB3_CHRNA1", "LAMC1_CHRNA1", "LAMC2_CHRNA1",
"LAMC3_CHRNA1", "TAC1_DPP4", "TAC1_FAP", "TAC1_TACR1",
"TAC1_TACR2", "TAC1_TACR3")
# Subset the original dataframe to create two new dataframes
dopamine <- df[, colnames(df) %in% dopamine_columns]
acetylcholine <- df[, colnames(df) %in% acetylcholine_columns]
dopamine <- df
# Step 1: Calculate the mean of each row
row_means_dopamine <- rowMeans(dopamine)
ratios_dopamine <- data.frame(Mean = row_means_dopamine)
row_means_acetycholine <- rowMeans(acetylcholine)
ratios_choline <- data.frame(Mean = row_means_acetycholine)
# Step 2: Calculate the adjusted sum for each row
adjusted_sums <- sapply(row_means_dopamine, function(x) sum(row_means_dopamine) - x)
# Step 3: Calculate the final ratio for each row
ratios <- (row_means_dopamine / adjusted_sums)*100
ratios_df <- data.frame(Ratios = ratios)
df <- scale(df)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Apply the normalization function to each column
df_normalized <- as.data.frame(lapply(df, normalize))
pheatmap(t(df), display_numbers = TRUE, angle_col = 0)
#install.packages("pheatmap")
#install.packages("RColorBrewer")
rm(list = ls())
setwd("/Users/veronikapak/Desktop/cell cell project/validation");
file_path <- "dkt_validation.csv";
X <- read.csv(file_path, header = T);
rownames(X) <- X[,1]
X <- X[,-1]
Y <- read.csv("full dkt.csv", header = T)
rownames(Y) <- rownames(X)
labels <- read.csv('labels.csv', header = T);
# Correlation analysis
corr1 <- cor(X, Y, method = "spearman")
# First table
file_path <- "atrophy_corr.csv";
df <- read.csv(file_path, header = T, row.names = NULL);
rownames(df) <- df[,1]
df <- df[,-1]
colnames(df) <- gsub("^X\\.", "", colnames(df))
colnames(df) <- gsub("\\.$", "", colnames(df))
rownames(df) <- gsub("^X\\.", "", rownames(df))
X <- df[, 1:37]  # Select columns 1 to 268 for X
Y <- df[, 38:45] #DKT
corr2 <- cor(X, Y, method = "spearman")
corr <- cbind(corr2, corr1)
annotation_df <- data.frame(
Type = labels$Type
)
# Factor the 'Group' to control colors and labels
annotation_df$Type <- factor(labels$Type, levels = c("Dopamine", "Acetycholine"))
# Optional: Add colors for groups
group_colors <- setNames(c("gold1", "maroon"), c("Dopamine", "Acetycholine"))
rownames(annotation_df) <- labels$Pair
# Vizualize significant features with heatmap
pheatmap(corr, display_numbers = TRUE,
annotation_row = annotation_df, annotation_colors = list(Type = group_colors))
rm(list = ls())
library(pheatmap)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
setwd("/Users/veronikapak/Desktop/cell cell project/Validation");
file_path <- "dopamine_validation_dkt.csv";
df <- read.csv(file_path, header = T);
View(df)
rownames(df) <- df[,1]
df <- df[,-1]
pheatmap(df, display_numbers = TRUE, angle_col = 0)
row_means_dopamine <- rowMeans(df)
ratios_dopamine <- data.frame(Mean = row_means_dopamine)
View(ratios_dopamine)
# Step 2: Calculate the adjusted sum for each row
adjusted_sums <- sapply(row_means_dopamine, function(x) sum(row_means_dopamine) - x)
# Step 3: Calculate the final ratio for each row
ratios <- (row_means_dopamine / adjusted_sums)*100
ratios_df <- data.frame(Ratios = ratios)
View(ratios_df)
df <- scale(df)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Apply the normalization function to each column
df_normalized <- as.data.frame(lapply(df, normalize))
pheatmap(t(df), display_numbers = TRUE, angle_col = 0)
pheatmap(df, display_numbers = TRUE, angle_col = 0)
pheatmap(df_normalized, display_numbers = TRUE, angle_col = 0)
pheatmap(df, display_numbers = TRUE, angle_col = 0)
df <- read.csv(file_path, header = T);
rownames(df) <- df[,1]
df <- df[,-1]
df <- scale(df)
pheatmap(df, display_numbers = TRUE, angle_col = 0)
file_path <- "dopamine_validation_dkt.csv";
df <- read.csv(file_path, header = T);
rownames(df) <- df[,1]
df <- df[,-1]
df <- scale(df)
pheatmap(df, display_numbers = TRUE, angle_col = 0)
View(df)
df <- read.csv(file_path, header = T, check.names = FALSE);
View(df)
rownames(df) <- df[,1]
df <- df[,-1]
df <- scale(df)
pheatmap(df, display_numbers = TRUE, angle_col = 0)
pheatmap(df, display_numbers = TRUE, angle_col = 45)
pheatmap(df, display_numbers = TRUE, angle_col = 0)
?pheatmap
